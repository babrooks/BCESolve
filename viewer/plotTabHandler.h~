#ifndef PLOTTABHANDLER_H
#define PLOTTABHANDLER_H

#include <vector>
#include <QtWidgets>
#include "guiDataState.hpp"
#include "qcustomplot.h"
#include "bceslider.h"
#include "bcelineedit.hpp"
#include "bcecheckbox.hpp"
#include "bceValueSetPlot.hpp"

using namespace std;

class BCEWindow : public QMainWindow
{
  Q_OBJECT;

 public:
  BCEWindow();

  public slots:

    void changeSliderValue(int newVal,GUIDataState::BCESliderType type,int player);
    void changeMarginalBool(bool newBool,GUIDataState::BCESliderType type,int player);
    void setNewEqm(double x,double y);

 private:

    QVector<BCESlider*> sliderGroup;
    QVector<BCELineEdit*> lineEditGroup;
    QVector<BCECheckBox*> checkBoxGroup;

    QString path;

    QCustomPlot *conditionalMarginalPlot;
    QCPColorMap *colorMap;
    QCPColorScale *colorScale;
    QCPColorGradient *mGradient;

    BCEValueSetPlot *payoffPlot;

    QCustomPlot *player0DevObj;
    QCustomPlot *player1DevObj;

    GUIDataState gui;
    void plotEqm(vector<vector<double>> bceEqm);
    void plotDeviationObjectives(int index, vector<vector<double>> deviationObjectives);
    void plotBCEValueSet(int objective0,int objective1);
    void plotSelectGraphics(GUIDataState::BCESliderType type,int player);
    void plotAllGraphics();

    QMenu *fileMenu;
    QAction *loadSolutionAction;

    private slots:

      void loadSolution();
      void setLinearScale();
      void setLogScale();
      void setColorfulTheme();
      void setBlueTheme();

};

#endif
