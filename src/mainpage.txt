/*! \mainpage BCESolve Documentation
\section introsec Introduction

BCESolve is a library of routines for representing, solving, and
analyzing Bayes correlated equilibria (BCE), a solution concept
that generalized correlated equilibrium to games of incomplete
information. BCE, like correlated equilibria, are joint
distributions that satisfy a series of linear constraints. The
library utilizes IBM's CPLEX linear programming package to solve
for BCE that maximize a given linear objective, such as expected
payoffs of the players.

\section installsec Installation

To use the library, you must first install CPLEX and have the
CPLEX libraries locatable on the path. The program also uses Boost
libraries for serialization, which the user must install. The src
and examples directories have makefiles for building the source
code using GNU's make. The makefile may have to be edited to
reflect the correct path to CPLEX and Boost. The program has most
recently been compiled with gcc 4.8.2 and run using CPLEX 12.51
and Boost 1.57 on Centos 7. To build the program, simply open a
terminal, change to the examples directory, and run "make".

\section overviewsolvesec Overview of the solver program

The BCESolve library contains a series of classes for
representing, solving, and analyzing BCE. The BCEAbstractGame class is a
base class for representing games of incomplete information. One
must derive from this class, and reimplement its
BCEGame::objective and BCEGame::prior methods to reflect the
payoff functions and the distribution of the state for the
particular game of interest.

The BCESolver class uses CPLEX to solve a game represented by an
object derived from the BCEAbstractGame class, by maximizing a particular
linear objective over all BCE for that game.

The output from the BCESolver class is stored in a BCESolution
object. BCESolution objects can be serialized and de-serialized, and
the class also contains routines for analyzing the BCE contained
within.

\section overviewviewersec Overview of the viewer program

BCESolve also includes an accompanying viewer. It is capable of displaying
data in a BCESolution object. This includes plotting player payoffs for
all equilibria, plotting deviation objectives for each player,
and plotting the probability distribution of player actions given the state.
It also includes a tab for creating custom games, using the class BCEGame,
which is derived from BCEAbstractGame. The user can control the conditional
distribution of types, objective payoffs, the prior over the states, and
weights on the objectives for maximization. The user can solve these
custom games within the viewer. Output is displayed in a log tab, and the 
solution is displayed in the solution tab. The custom BCEGame can also
be serialized and de-serialized.

\section examplesec Examples

A number of examples have been provided to illustrate how to use
the program. Please see fpaknown.cpp, which uses the class files
fpaknown.hpp and fpagame.hpp, for an example that solves a private
first price auction. The file fpaunknown.cpp uses fpagame.hpp to
solve an "unknown" private value auction. Both of these programs
show how to derive from the BCEGame class to create a
representation of your own game.

Enjoy!

Ben Brooks,
Chicago, Il


*/


/*! \defgroup src BCESolve solver engine
@brief The solver routines.
*/


/*! \defgroup viewer BCEViewer graphical interface

@brief The graphical interface.

*/
